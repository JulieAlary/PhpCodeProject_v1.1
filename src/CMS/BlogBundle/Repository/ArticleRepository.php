<?php

namespace CMS\BlogBundle\Repository;

use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{

    /**
     * Get article with paginator
     *
     * @param $page
     * @param $nbPerPage
     * @return Paginator
     */
    public function getArticles($page, $nbPerPage)
    {

        $query = $this->createQueryBuilder('a')
            //jointure avec les images
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            //jointure sur les catégories
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        $query
            ->setFirstResult(($page - 1) * $nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    /**
     * Fonction retournant tous les articles corrrespondant à une catégorie
     *
     * @param array $categoryNames
     * @return array
     */
    public function getArticleWithCategories(array $categoryNames)
    {

        $qb = $this->createQueryBuilder('a');

        // Jointure avec l'entity catégorie avec pour alias C
        $qb
            ->innerJoin('a.categories', 'c')
            ->addSelect('c');

        // Filtre sur le nom des catégories à l'aide de IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));

        //retourne le résultat
        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @return array
     */
    public function myFindAll()
    {

        return $this
            ->createQueryBuilder('a')
            ->getQuery()
            ->getResult();
    }

    /**
     *Pour retrouver tous les articles par example de l'année courante
     *
     * @param QueryBuilder $qb
     */
    public function whereCurrentYear(QueryBuilder $qb)
    {

        $qb
            ->andWhere('a.date BETWEEN =start AND :end')
            ->setParameter('start', new \DateTime(date('Y') . '-01-01'))
            ->setParameter('end', new \DateTime(date('Y') . '-12-31'));
    }

    /**
     * Display articles par catégorie
     *
     * @param $categoryId
     * @return array
     */
    public function getArticlesByCategory($categoryId)
    {
        $query = $this->createQueryBuilder('a')
            //jointure sur les catégories
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->where('c.id = :id' )
            ->orderBy('a.date', 'DESC')
            ->setParameter('id', $categoryId);

        return $query
            ->getQuery()
            ->getResult();
    }
}
